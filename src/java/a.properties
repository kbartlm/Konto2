
# when connecting to the HBCI-server we have to provide an
# application name and version. this is sometimes used by
# the hbci-server to handle certain applications in a special way.
# you may use the defaults here.
client.product.name=HBCI4Java
client.product.version=2.0

# -----------------------------------------------------------------

# these are the parameters for the DDV security mechanism
# (symmetric keys stored on a chipcard)

# the *prefix* of the filename in which to locally cache
# all needed user and institure information. the filename will be 
# built from this value and the card-number (16 digits). so if you
# really want to specify a *pathname* here, dont forget
# the trailing "/"
client.passport.DDV.path=./passports/

# name of the shared library, that makes the connection between
# java and the CT-API. this library is shipped with the jhbci-
# package. specify the os-typical name here (un*x: ddv,
# windows: libddv). this library must be placed somewhere
# where your os looks for shared libraries. you can also specify
# the path where you stored it via the "java.library.path" system
# property
client.passport.DDV.libname.ddv=ddv

# this is the name of the ctapi-library, that you can get
# from the vendor of your chipcard-terminal. see also
# description of client.passport.DDV.libname.ddv
client.passport.DDV.libname.ctapi=ctapi-cyberjack

# the portnumber to be used when accessing the chipcard terminal.
# for serially connected terminals, /dev/ttyS0 (COM1:) is 
# accessed by port=1 (some vendors also use port=0), for
# /dev/ttyS1 (COM2:) use port=2 (sometimes port=1) and so on.
# the same scheme applies for USB-connected terminals
client.passport.DDV.port=1

# which internal termina-number to be used when accessing the
# chipcard-terminal. this is only interesting, when you have
# more than one terminal accessed by the *same* driver (e.g.
# two reiner-sct-terminals). each terminal needs an unique number
# (starting with 0)
client.passport.DDV.ctnumber=0

# this setting is *very* experimental and currently only works
# for reiner-sct-biometric chipcard-terminal. when you set this
# to 1, then you dont have to enter the chipcard-pin manually, but
# can use your fingerprint instead, so that the chipcard-terminal
# automatically "enters" the pin assigned to your finger
client.passport.DDV.usebio=0

# this setting is for chipcard-terminals that dont have an
# own keypad (i.e. class-1 chipcard-terminals). if you set
# this to 1, the pin for accessing the chipcard will be requested
# by software, i.e. you have to enter it via your computer-
# keyboard. this is of course less secure, because someone could
# "sniff" the pin. also, the client-software must support this.
client.passport.DDV.softpin=0

# this parameter is only used, when softpin is 1. this can be set
# to the chipcard-pin, so that you dont have to enter the pin
# manually. but beware, if someone finds this config-file (or the
# software code that sets this option), she knows your pin!
#client.passport.DDV.pin=

# -------------------------------------------------------------------

# the following settings are for security type RDH
# (asymmetric keys stored in a special rsa-key-file)
# note, that this hbci-implementation uses an own format
# for these key-files, so the files you get from your credit-
# institute will not work!
# there will be tools in the future to convert these external
# files to the right format.

# the filename of the passport file to be used. this option will
# mostly be set by the application, depending on the user who wants
# to connect to his credit institute (so this file is user-
# and credit institute -individual)
client.passport.RDH.filename=./passports/institute_X_user_Y.dat

# always set this to 1, all other possible settings are only used
# internally
client.passport.RDH.init=1

# -------------------------------------------------------------------

client.passport.PinTan.filename=./passports/institute_X_user_Y_pintan.dat
client.passport.PinTan.certfile=hbcicerts.bin
client.passport.PinTan.init=1

# -------------------------------------------------------------------

# this option specifies which security method to use (DDV, RDH)
# when no parameter is given to HBCIPassport.getInstance()
client.passport.default=PinTan

# -------------------------------------------------------------------

# this setting is only needed when you (the hbci-kernel, i.e. the
# listener-part of this implementation) are behind a firewall, which
# just lets out connections *from* specific tcp-ports. you can
# set the tcp-port for the local end of the connection with this
# option. if it is not set, the port will be assigned by the os.
#client.connection.localPort=62534

# ------------------------------------------------------------------

# this is the path where the kernel searches for the
# xml-file that contains the syntax-description for the
# requested hbci-version. when searching for the file, 
# the kernel uses the ClassLoader.getResourceAsStream()
# method, giving this option+filename as arguments. 
# normally you dont have to set this option, but
# dont forget the trailing "/" if specified
#kernel.kernel.xmlpath=syntax/

# this option sets the loglevel for messages generated
# by the hbci-kernel. the default value is 2.
# the levels have to following semantics:
# 0=no logging, 1=errors, 2=warnings, 3=info, 4=debug
# a loglevel of X contains all loglevels less than X
log.loglevel.default=4

# this option is a list of so called "rewriter"-modules.
# these modules are used to fix bugs that some credit-
# institutes make in their hbci-implementation. usually
# you dont have to change this option.
kernel.rewriter=\
  1822direkt
